#!/usr/bin/bash
## mooOS Installer =)
## 2013-2014 pdq
## from mooOS

## root script
if [ $(id -u) -ne 0 ]; then
    echo "run this installer with sudo"
fi

 ## set live user
[ $SUDO_USER ] && moo=$SUDO_USER || moo=$(whoami)

######### START CONFIGURATION ##########
. /etc/moo.cfg

### Code be `ere yarrr! ###

## figure out architecture type
archtype="$(uname -m)"

## moo_installer --debug
moo_arg=$1

check_repos() {
    while true
    do
        if [ $2 -eq 1 ]; then
            torsocks curl -s -o "/dev/null" "$1"
        else
            curl -s -o "/dev/null" "$1"
        fi

        if [ $? -ne 0 ] ; then
            echo "Error occurred getting URL $1: rechecking in 10 seconds"
        elif [ $? -eq 6 ]; then
            echo "Unable to resolve host: rechecking in 10 seconds"
        elif [ $? -eq 7 ]; then
            echo "Unable to connect to host: rechecking in 10 seconds"
        else
            echo "$1 is UP! :D proceeding..."
            notify-send "$1 is UP! :D proceeding..." -i "$MOO_ICON"
            break
        fi
        sleep 10s
    done
}

check_repos "$MOO_URL" 1

upper_title="Welcome to mooOS Installer $archtype"

# dialog --clear --backtitle "$upper_title" --title "Preferences" --yes-label "Text Mode" --no-label "Graphical Mode" --yesno "Chose the Installer Type." 20 70
# if [ $? = 0 ] ; then
      DIALOG=${DIALOG=dialog}
# else
#     DIALOG=${DIALOG=Xdialog}
# fi

$DIALOG --clear --backtitle "$upper_title" --title "Information" --msgbox "You can decrease/increase the FONT SIZE with Ctrl+Down/Up arrow keys.\n\nFeel free to use gparted or other GNU/Linux tools to manage your partitioning schema before running this installer.\n\nIf manual partitioning IS done then you SHOULD skip right to \"Step 3 Format and/or mount filesystems\"" 20 70


if [ "$archtype" = "x86_64" ]; then
    $DIALOG --backtitle "$upper_title" --title "Information" --msgbox "Your architecture type is x86_64, this installer assumes you are using the x86_64 livecd option...proceeding" 20 70
    archtype="x86_64"
    not_archtype="i686"
else
    $DIALOG --backtitle "$upper_title" --title "Information" --msgbox "Your architecture type is i686, this installer assumes you are using the i686 livecd option... proceeding" 20 70
    archtype="i686"
    not_archtype="x86_64"
fi

if [ $? = 255 ] ; then
    exit 0
fi

$DIALOG --clear --backtitle "$upper_title" --title "Architecture type" --yes-label "$archtype" --no-label "$not_archtype" --yesno "Double check. [Select Arch type]" 20 70
if [ $? = 0 ] ; then
        archtype=$archtype
    else
        archtype=$not_archtype
fi

setterm -blank 0

## styling
clr="\Zb"
clr_end="\Zn"

## temporary files
_TEMP=/tmp/answer$$
mkdir -p /tmp/tmp 2>/dev/null
TMP=/tmp/tmp 2>/dev/null
_CURRENT=/tmp/current

## functions
exiting_installer() {
    clear
    rm -f $_TEMP
    $DIALOG --clear --backtitle "$upper_title" --title "Exiting Script" --msgbox "type: sudo moo_installer to re-run" 10 40
    exit 0
}

current_selection() {
    echo "$1" > $_CURRENT
}

installer_menu() {

    CUR=$(cat $_CURRENT)
    $DIALOG \
        --default-item "$CUR" --colors --backtitle "$upper_title" --title "$upper_title" \
        --menu "Select action: (Do them in order)" 20 60 9 \
        1 $clr"List linux partitions"$clr_end \
        2 $clr"Partition editor (cfdisk)"$clr_end \
        3 $clr"Format and/or mount filesystems"$clr_end \
        4 $clr"Create internet connection"$clr_end \
        5 $clr"Install mooOS"$clr_end \
        6 $clr"Generate fstab"$clr_end \
        7 $clr"Configure system"$clr_end \
        8 $clr"Finish and reboot. (Remove livecd after poweroff)"$clr_end \
        9 $clr"Exit" 2>$_TEMP

    if [ $? = 1 ] || [ $? = 255 ] ; then
        exiting
        return 0
    fi

    choice=$(cat $_TEMP)
    case $choice in
        1) list_partitions;;
        2) partition_editor;;
        3) make_filesystems;;
        4) make_internet;;
        5) initial_install;;
        6) generate_fstab;;
        7) chroot_configuration;;
        8) finishup;;
        9) exiting_installer;;
    esac
}

clean_return() {
    if [ $? = 255 ] ; then
        installer_menu
        return 0            
    fi
}

list_partitions() {
    #partition_list=`blkid | grep -i 'TYPE="ext[234]"' | cut -d ' ' -f 1 | grep -i '^/dev/' | grep -v '/dev/loop' | grep -v '/dev/mapper' | sed "s/://g"`
    fdisk -l | grep Linux | cut -b 1-9 > $TMP/pout 2>/dev/null
    partition_list=$(cat $TMP/pout)
    if [ "$partition_list" = "" ] ; then
        partition_list="It appears you have no linux partitions yet."
    fi

    df -aTh | grep /mnt > $TMP/df_out 2>/dev/null
    df_out=$(cat $TMP/df_out)

    current_selection 2

    $DIALOG --clear --backtitle "$upper_title" --title "Partitions" --msgbox "${partition_list}\n\n${df_out} \n\n Hit enter to return to menu" 25 100
}

is_mnt_is_device_is_freespace() {
    chosen_device="$1"
    min_space_required="$2"
    is_mounted=$(mountpoint -q $chosen_device && echo 1 || echo 0)

    if [ $is_mounted -eq 1 ]; then
        df "$chosen_device" | tail -n+2 | while read fs size used avail use mount ; do
            if [[ $avail ]] ; then
                freespace_left=$(echo $avail | grep -o '[0-9]*')
                #echo $freespace_left
                if [ $freespace_left -lt $min_space_required ]; then
                    $DIALOG --clear --backtitle "$upper_title" --title "WARNING" --msgbox "Not enough freespace left on the target device.\n\n$fs is mounted at $chosen_device\n\nMinimum freespace required: $min_space_required kilobytes.\n\nActual freespace on device/mount: $freespace_left kilobytes.\n\nReturning to menu..." 20 70
                    return 0
                else
                    $DIALOG --clear --backtitle "$upper_title" --title "SUCCESS" --msgbox "Sufficient freespace left on the target device.\n\n$fs is mounted at $chosen_device.\n\nMinimum freespace required: $min_space_required bytes.\n\nActual freespace on device/mount: $freespace_left kilobytes.\n\nContinuing..." 20 70
                    return 1
                fi
            fi
        done
    else
        $DIALOG --clear --backtitle "$upper_title" --title "WARNING" --msgbox "Nothing is mounted on $chosen_device.\n\nReturning to menu..." 20 70
        return 0
    fi
}

check_valid_packages() {
    chosen_packages="$1"
    success=1
    for pkg in $chosen_packages
    do
        pacman -Sdp "$pkg"
        if [ $? -ne 0 ]; then
            $DIALOG --backtitle "$upper_title" --title "Custom Packages" --msgbox "$pkg not found. Please re-try and remove this package from your custom package choices." 20 70
            success=0
            break
        fi
    done
    if [ $success -eq 1 ]; then
        $DIALOG --backtitle "$upper_title" --title "Custom Packages" --msgbox "All the custom packages you have chosen will now be installed alongside the default mooOS packages." 20 70
        return 1
    else
        return 0
    fi
}

partition_editor() {
    $DIALOG --clear --backtitle "$upper_title" --title "Partition editor" --cancel-label "Cancel" --msgbox "pdq is not responsible for loss of data or anything else. When in doubt, cancel and read the code.\n\nIf you accept this, you can start cfdisk now!\n\nYou can return to the main menu at any time by hitting <ESC> key." 20 70
    clean_return

    $DIALOG --clear --backtitle "$upper_title" --title "Partition editor" --yesno "Create a / (primary, bootable* and recommended minimum 8GB in size) and a /home (primary and remaining size) partition.\n\n* Optionally create a /swap (primary and recommended twice the size of your onboard RAM) and /boot (primary, bootable and recommended minimum 1GB in size) partition.\n\nJust follow the menu, store your changes and quit cfdisk to go on!\n\nIMPORTANT: Read the instructions and the output of cfdisk carefully.\n\nProceed?" 20 70
    if [ $? = 0 ] ; then
        mountpoint -q /mnt/home || mountpoint -q /mnt/boot && umount /mnt/* 2>/dev/null
        mountpoint -q /mnt && umount /mnt 2>/dev/null

        $DIALOG --clear --backtitle "$upper_title" --title "CHOOSE DEVICE" --inputbox "Please choose device to launch with partitioning utility (cfdisk):\n\nexample: /dev/hda" 10 70 2> $TMP/ch_part
        if [ $? = 1 ] || [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi
        
        ch_part=$(cat $TMP/ch_part)
        cfdisk $ch_part
    fi

    current_selection 3
}

make_filesystems() {
    mountpoint -q /mnt/home || mountpoint -q /mnt/boot && umount /mnt/* 2>/dev/null
    mountpoint -q /mnt && umount /mnt 2>/dev/null
    fdisk -l | grep Linux | sed -e '/swap/d' | cut -b 1-9 > $TMP/pout 2>/dev/null

    $DIALOG --clear --backtitle "$upper_title" --title "ROOT PARTITION DETECTED" --exit-label OK --msgbox "Installer has detected\n\n `cat /tmp/tmp/pout` \n\n as your linux partition(s).\n\nIn the next box you can choose the linux filesystem for your root partition or choose the partition if you have more linux partitions!" 20 70
    clean_return

    # choose root partition
    $DIALOG --clear --backtitle "$upper_title" --title "CHOOSE ROOT PARTITION" --inputbox "Please choose your preferred root partition in this way:\n\n/dev/hdaX --- X = number of the partition, e. g. 1 for /dev/hda1" 10 70 2> $TMP/pout
    if [ $? = 1 ] || [ $? = 255 ] ; then
        installer_menu
        return 0 
    fi

    pout=$(cat $TMP/pout)
    $DIALOG --clear --backtitle "$upper_title" --title "ROOT  PARTITION" --yesno "Confirm? root=$pout" 20 70
    if [ $? != 0 ] ; then
        installer_menu
        return 0 
    fi

    $DIALOG --clear --backtitle "$upper_title" --title "ROOT  PARTITION" --yesno "Create the filesystem? [Select No to skip to mounting]" 20 70
    if [ $? = 0 ] ; then
        $DIALOG --clear --backtitle "$upper_title" --title "FORMAT ROOT PARTITION" --radiolist "Now you can choose the filesystem for your root partition.\n\next4 is the recommended filesystem." 20 70 30 \
        "1" "ext2" off \
        "2" "ext3" off \
        "3" "ext4" on \
        2> $TMP/part
        if [ $? = 1 ] || [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi

        part=$(cat $TMP/part)
        fs_type=

        if [ "$part" == "2" ] ; then
            fs_type="ext3"
        elif [ "$part" == "3" ] ; then
            fs_type="ext4"
        else
            fs_type="ext2"
        fi

        mkfs -t $fs_type $pout
        typefs=" as $fs_type"
    fi

    mount $pout /mnt

    $DIALOG --clear --backtitle "$upper_title" --title "ROOT PARTITION MOUNTED" --msgbox "Your $pout partition has been mounted at /mnt$typefs" 10 70
    clean_return

    $DIALOG --clear --backtitle "$upper_title" --title "HOME  PARTITION" --yesno "Create the home partition?" 20 70
    if [ $? = 0 ] ; then
        # choose home partition
        $DIALOG --clear --backtitle "$upper_title" --title "CHOOSE HOME PARTITION" --inputbox "Please choose your preferred home partition in this way:\n\n/dev/hdaX --- X = number of the partition, e. g. 2 for /dev/hda2" 10 70 2> $TMP/plout
        if [ $? = 1 ] || [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi
        
        plout=$(cat $TMP/plout)
        $DIALOG --clear --backtitle "$upper_title" --title "HOME  PARTITION" --yesno "Confirm? home=$plout" 20 70
        if [ $? != 0 ] ; then
            installer_menu
            return 0 
        fi

        $DIALOG --clear --backtitle "$upper_title" --title "HOME  PARTITION" --yesno "Create the filesystem? [Select No to skip to mounting]" 20 70
        if [ $? = 0 ] ; then
            $DIALOG --clear --backtitle "$upper_title" --title "FORMAT HOME PARTITION" --radiolist "Now you can choose the filesystem for your home partition.\n\next4 is the recommended filesystem." 20 70 30 \
            "1" "ext2" off \
            "2" "ext3" off \
            "3" "ext4" on \
            2> $TMP/plart
            if [ $? = 1 ] || [ $? = 255 ] ; then
                installer_menu
                return 0 
            fi

            plart=$(cat $TMP/plart)
            fs_type=

            if [ "$plart" == "2" ] ; then
                fs_type="ext3"
            elif [ "$plart" == "3" ] ; then
                fs_type="ext4"
            else
                fs_type="ext2"
            fi

            mkdir -vp /mnt/home
            mkfs -t $fs_type $plout
            typefs=" as $fs_type"
        fi

        mount $plout /mnt/home

        $DIALOG --clear --backtitle "$upper_title" --title "HOME PARTITION MOUNTED" --msgbox "Your $plout partition has been mounted at /mnt/home$typefs" 10 70
    fi

    $DIALOG --clear --backtitle "$upper_title" --title "BOOT  PARTITION" --defaultno --yesno "Create the boot filesystem?" 20 70
    if [ $? = 0 ] ; then
        # choose boot partition
        $DIALOG --clear --backtitle "$upper_title" --title "CHOOSE BOOT PARTITION" --inputbox "Please choose your preferred boot partition in this way:\n\n/dev/hdaX --- X = number of the partition, e. g. 3 for /dev/hda3" 10 70 2> $TMP/pbout
        if [ $? = 1 ] || [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi
        
        pbout=$(cat $TMP/pbout)
        $DIALOG --clear --backtitle "$upper_title" --title "BOOT  PARTITION" --yesno "Confirm? home=$pbout" 20 70
        if [ $? != 0 ] ; then
            installer_menu
            return 0 
        fi

        $DIALOG --clear --backtitle "$upper_title" --title "BOOT PARTITION" --yesno "Create the filesystem? [Select No to skip to mounting]" 20 70
        if [ $? = 0 ] ; then
            $DIALOG --clear --backtitle "$upper_title" --title "FORMAT BOOT PARTITION" --radiolist "Now you can choose the filesystem for your boot partition.\n\next4 is the recommended filesystem." 20 70 30 \
            "1" "ext2" off \
            "2" "ext3" off \
            "3" "ext4" on \
            2> $TMP/pbart
            if [ $? = 1 ] || [ $? = 255 ] ; then
                installer_menu
                return 0 
            fi

            pbart=$(cat $TMP/pbart)
            fs_type=

            if [ "$pbart" == "2" ] ; then
            fs_type="ext3"
            elif [ "$pbart" == "3" ] ; then
            fs_type="ext4"
            else
            fs_type="ext2"
            fi

            mkdir -vp /mnt/boot
            mkfs -t $fs_type $pbout
            typefs=" as $fs_type"
        fi
        mount $pbout /mnt/boot
        ##mount $pbout /mnt/etc

        $DIALOG --clear --backtitle "$upper_title" --title "BOOT PARTITION MOUNTED" --msgbox "Your $pbout partition has been mounted at /mnt/boot$typefs" 10 70
    fi

    $DIALOG --clear --backtitle "$upper_title" --title "SWAP PARTITION" --defaultno --yesno "Create the swap filesystem?" 10 70
    if [ $? = 0 ] ; then
        # choose home partition
        $DIALOG --clear --backtitle "$upper_title" --title "CHOOSE SWAP PARTITION" --inputbox "Please choose your preferred swap partition in this way:\n\n/dev/hdaX --- X = number of the partition, e. g. 4 for /dev/hda4" 10 70 2> $TMP/psout
        psout=$(cat $TMP/psout)
        $DIALOG --clear --backtitle "$upper_title" --title "SWAP  PARTITION" --yesno "Confirm? swap=$psout" 20 70
        if [ $? != 0 ] ; then
            installer_menu
            return 0 
        fi

        mkswap $psout
        swapon $psout
        $DIALOG --clear --backtitle "$upper_title" --title "SWAP SETUP" --msgbox "Ran: mkswap $psout and swapon $psout" 10 70
    fi

    current_selection 4
}

make_internet() {
    $DIALOG --clear --backtitle "$upper_title" --title "Internet" --msgbox "Test/configure internet connection" 10 70
    clean_return

    # $DIALOG --clear --backtitle "$upper_title" --title "Internet" --yesno "Configure wired connection?" 10 70
    # if [ $? = 0 ] ; then
    #     local net_list mynet
    #     for mynet in $(ip link show | awk '/: / {print $2}' | tr -d :) ; do
    #         net_list+="${mynet} - "
    #     done

    #     my_networks=$($DIALOG --stdout --backtitle "$upper_title" --title 'Internet' --cancel-label "Go Back" \
    #     --default-item "${my_networks}" --menu "Choose network or <Go Back> to return" 16 45 23 ${net_list} "Exit" "-" || echo "${my_networks}")

    #     if [ "$my_networks" = "" ] || [ $? = 255 ] || [ "$my_networks" = "Exit" ] ; then
    #         installer_menu
    #         return 0
    #     fi

    #     if [ "$my_networks" ] ; then # some better check should be here / placeholder
    #         #dhcpcd $my_networks
    #         if [ -f /usr/bin/netctl ]; then
    #             mkdir create_network && cd create_network
    #             wget http://www.opennicproject.org/nearest-servers/
    #             dns_ip1=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' index.html | sort -r | head -1)
    #             dns_ip2=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' index.html | sort -rg | head -1)
    #             cp /etc/netctl/examples/ethernet-static /etc/netctl/ethernetstatic
    #             sed -i "s/eth0/$my_networks/g" /etc/netctl/ethernetstatic
    #             echo "DNS=('$dns_ip1' '$dns_ip2')" >> /etc/netctl/ethernetstatic
    #             netctl start ethernetstatic
    #             netctl enable ethernetstatic
    #             cd .. && rm -r create_network
    #         else
    #             dhcpcd $my_networks
    #         fi

    #         $DIALOG --clear --backtitle "$upper_title" --title "Internet" --msgbox "Set network to $my_networks using netctl (enabled/started)" 10 30
    #     else
    #         $DIALOG --clear --backtitle "$upper_title" --title "Internet" --msgbox "Failed to set network...network does not exist/null?" 10 30
    #     fi
    # else
    #     $DIALOG --clear --backtitle "$upper_title" --title "Internet" --radiolist "Choose your preferred wireless setup tool" 10 70 30 \
    #     "1" "wifi-menu" on \
    #     "2" "wpa_supplicant" off \
    #     2> $TMP/pwifi
    #     if [ $? = 1 ] || [ $? = 255 ] ; then
    #         installer_menu
    #         return 0 
    #     fi

    #     local net_list mynet
    #     for mynet in $(ip link show | awk '/: / {print $2}' | tr -d :) ; do
    #         net_list+="${mynet} - "
    #     done

    #     my_networks=$($DIALOG --stdout --backtitle "$upper_title" --title 'Internet' --cancel-label "Go Back" \
    #     --default-item "${my_networks}" --menu "Choose network or <Go Back> to return" 16 45 23 ${net_list} "Exit" "-" || echo "${my_networks}")

    #     if [ "$my_networks" = "" ] || [ $? = 255 ] || [ "$my_networks" = "Exit" ] ; then
    #         installer_menu
    #         return 0
    #     fi

    #     if [ "$my_networks" ] ; then # some better check should be here / placeholder
    #         dhcpcd $my_networks
    #         $DIALOG --clear --backtitle "$upper_title" --title "Internet" --msgbox "Set network to $my_networks" 10 30
    #     else
    #         $DIALOG --clear --backtitle "$upper_title" --title "Internet" --msgbox "Failed to set network...network does not exist/null?" 10 30
    #     fi

    #     pwifi=$(cat $TMP/pwifi)
    #     if [ "$pwifi" == "1" ] ; then
    #         if [ -f /usr/bin/netctl ]; then
    #             wifi-menu $my_networks
    #         else
    #             dhcpcd $my_networks
    #         fi
    #     else
    #         $DIALOG --clear --backtitle "$upper_title" --title "Internet" --inputbox "Please enter your SSID" 10 70 2> $TMP/pssid
    #         pssid=$(cat $TMP/pssid)

    #         $DIALOG --clear --backtitle "$upper_title" --title "Internet" --passwordbox "Please enter your wireless passphrase" 10 70 2> $TMP/ppassphrase
    #         ppassphrase=$(cat $TMP/ppassphrase)
    #         wpa_passphrase "$pssid" "$ppassphrase" >> /etc/wpa_supplicant.conf
    #         wpa_supplicant -B -Dwext -i $my_networks -c /etc/wpa_supplicant.conf & >/dev/null
    #     fi

    #     #dhcpcd $my_networks
    #     # wget -q --tries=10 --timeout=5 http://www.google.com -O /tmp/index.google &> /dev/null
    #     # if [ ! -s /tmp/index.google ] ; then
    #     #     $DIALOG --clear --backtitle "$upper_title" --title "Internet" --msgbox "It appears you have no internet connection, refer to for instructions on loading your required wireless kernel modules.\n\nhttps://wiki.archlinux.org/index.php/Wireless_Setup" 20 30
    #     # else
    #     #     $DIALOG --clear --backtitle "$upper_title" --title "Internet" --msgbox "It appears you have an internet connection, huzzah for small miracles. :p" 10 30
    #     # fi
    # fi

    # $DIALOG --clear --backtitle "$upper_title" --title "Internet" --msgbox "Internet configuration complete.\n\n Hit enter to return to menu" 10 30
    current_selection 5
}

initial_install() {
    $DIALOG --clear --backtitle "$upper_title" --title "Initial install" --msgbox "Install packages" 10 30
    clean_return

    # is_mounted=$(mountpoint -q /mnt && echo 1 || echo 0)
    # if [ $is_mounted ]; then
    #      update-mirrorlist
    # else
    #     $DIALOG --clear --backtitle "$upper_title" --title "WARNING" --msgbox "No Mounted Partition detected on /mnt\n\nReturning to menu..." 20 70
    #     current_selection 3
    #     installer_menu
    #     return 0 
    # fi

    if [ "$archtype" = "x86_64" ]; then
        mainpkgs="${MOO_TOOLS_PATH}packages.x86_64"
    else
        mainpkgs="${MOO_TOOLS_PATH}packages.i686"
    fi

    pacman_conf="pacman.conf"

    $DIALOG --clear --backtitle "$upper_title" --title "Base packages (mandatory)" --yesno "Install base and base-devel? [Select No to skip]" 20 70
    if [ $? = 0 ] ; then
        ## sanity checks for if is mounted and if filespace available
        is_mnt_is_device_is_freespace /mnt 6023456 ## 5.7 GiB
        if [ $? -eq 1 ]; then  ## 5.7 GiB
            update-mirrorlist
            if [ "$moo_arg" = "--debug" ]; then
                pacstrap -C /etc/pacman.conf /mnt base base-devel 2>&1 | tee -a /home/$moo/.log
            else
                pacstrap -C /etc/pacman.conf /mnt base base-devel
            fi
        fi
    fi
    
    $DIALOG --clear --backtitle "$upper_title" --title "mooOS packages (mandatory)" --yesno "Install all the mooOS packages? [Select No to skip]" 20 70
    if [ $? = 0 ] ; then
        ## sanity checks for if is mounted and if filespace available
        is_mnt_is_device_is_freespace /mnt 5323456 ## 5.0 GiB
        if [ $? -eq 1 ]; then
            echo "" > $TMP/ppkgs
            $DIALOG --clear --backtitle "$upper_title" --title "Custom packages" --inputbox "Please enter any packages you would like added to the initial system installation.\n\nSeperate multiple packages with a space.\n\nIf you do not wish to add any packages beyond the default\nleave input blank and continue." 40 70 2> $TMP/ppkgs
            deppkgs="$(cat $TMP/ppkgs)"

            ## ensure user input is valid
            check_valid_packages "$deppkgs"
            if [ $? -eq 1 ]; then
                ppkgs=" $deppkgs"
                # $DIALOG --clear --backtitle "$upper_title" --title "Install type" --yes-label "Desktop (Full)" --no-label "Server (INCOMPLETE) " --yesno "Installation type?" 20 70
                # if [ $? = 0 ] ; then
                #     $DIALOG --clear --backtitle "$upper_title" --title "Server Utilities" --defaultno --yesno "Install Apache, MySQL, php, phpmyadmin, transmission-cli, flexget?\n (INCOMPLETE)" 20 70
                #     if [ $? = 0 ] ; then
                #         basepkgs="${MOO_TOOLS_PATH}packages.both ${MOO_TOOLS_PATH}packages-server.both"
                #     else
                #         basepkgs="${MOO_TOOLS_PATH}packages.both"
                #     fi
                # else
                #     basepkgs="${MOO_TOOLS_PATH}packages-server.both"
                # fi

                ## TODO
                basepkgs="${MOO_TOOLS_PATH}packages.both"
                extrapkgs="${MOO_TOOLS_PATH}packages.extra"

                
                mv -v /mnt/etc/pacman.conf /mnt/etc/pacman.conf.bak
                mkdir -vp /mnt/etc/pacman.d

                #cp -v /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/
                cp -v /etc/$pacman_conf /mnt/etc/pacman.conf

                # $DIALOG --clear --backtitle "$upper_title" --title "Packages" --yesno "Do you wish to use socks5 proxy for pacman? (Default: yes)" 10 30
                # if [ $? = 0 ] ; then
                #     sed -i "s/#XferCommand = \/usr\/bin\/curl -C - -f %u > %o/XferCommand = \/usr\/bin\/curl --socks5-hostname localhost:9050 -C - -f %u > %o/g" /mnt/etc/pacman.conf
                # fi

                update-mirrorlist
                if [ "$moo_arg" = "--debug" ]; then
                    pacstrap -C /mnt/etc/pacman.conf /mnt sudo git rsync wget dialog xdialog zsh$ppkgs $(cat $basepkgs) $(cat $mainpkgs) $(cat $extrapkgs) 2>&1 | tee -a /home/$moo/.log
                 else
                    pacstrap -C /mnt/etc/pacman.conf /mnt sudo git rsync wget dialog xdialog zsh$ppkgs $(cat $basepkgs) $(cat $mainpkgs) $(cat $extrapkgs)
                fi
            fi
        fi
    fi

    if [ -f /mnt/usr/bin/dialog ]; then
        $DIALOG --clear --backtitle "$upper_title" --title "Copy files (mandatory)" --yesno "Copy over required config files for mooOS? [Select No to skip]" 20 70
        if [ $? = 0 ] ; then
            is_mnt_is_device_is_freespace /mnt 234560 ## 230 MiB
            if [ $? -eq 1 ]; then
                PWD=$(pwd)

                rm -rf /mnt/etc/skel
                cp -vr /etc/skel /mnt/etc/

                cp -v /etc/$pacman_conf /mnt/etc/pacman.conf
                #sed -i "s/repo.mooOS.pdq/mooos.org\/repos/g" /mnt/etc/pacman.conf
                sed -i "s/#CheckSpace/CheckSpace/g" /mnt/etc/pacman.conf

                cp -v /etc/psd.conf /mnt/etc/psd.conf
                cp -v /etc/dhcpcd.conf /mnt/etc/dhcpcd.conf
                cp -v /etc/dnsmasq.conf /mnt/etc/dnsmasq.conf
                cp -v /etc/resolv.conf /mnt/etc/resolv.conf
                cp -v /etc/resolv.conf.head /mnt/etc/resolv.conf.head
                mkdir -vp /mnt/etc/tor
                cp -vr /etc/tor/* /mnt/etc/tor/
                cp -vr /etc/systemd/system/* /mnt/etc/systemd/system/
                
                mkdir -vp /mnt/etc/privoxy
                sh -c "echo 'forward-socks5 / localhost:9050 .' > /mnt/etc/privoxy/config"

                mkdir -vp /mnt/etc/dansguardian
                cp -v /etc/dansguardian/dansguardian.conf /mnt/etc/dansguardian/dansguardian.conf

                mkdir -vp /mnt/etc/squid
                cp -v /etc/squid/squid.conf /mnt/etc/squid/squid.conf

                mkdir -vp /mnt/etc/pacserve
                cp -vr /etc/pacserve/* /mnt/etc/pacserve/

                mkdir -vp /mnt/etc/modules-load.d
                cp -vr /etc/modules-load.d/* /mnt/etc/modules-load.d/

                mkdir -vp /mnt/etc/grub.d
                cp -vr /etc/grub.d/* /mnt/etc/grub.d/

                mkdir -vp /mnt/etc/default
                cp -vr /etc/default/* /mnt/etc/default/

                mkdir -vp /mnt/usr/share/nano
                cp -v /usr/share/nano/pkgbuild.nanorc /mnt/usr/share/nano/pkgbuild.nanorc

                mkdir -vp /mnt/usr/share/enlightenment/data/backgrounds
                cp -v /usr/share/enlightenment/data/backgrounds/mooOS* /mnt/usr/share/enlightenment/data/backgrounds

                #mkdir -vp /mnt/usr/share/enlightenment/data/themes
                #cp -v /usr/share/enlightenment/data/themes/* /mnt/usr/share/enlightenment/data/themes

                #mv -v /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bak
                #cp -v ${dev_directory}etc/httpd.conf /etc/httpd/conf/httpd.conf
                #cp -v ${dev_directory}etc/httpd-phpmyadmin.conf /etc/httpd/conf/extra/httpd-phpmyadmin.conf
                #mv -v /etc/php/php.ini /etc/php/php.ini.bak
                #cp -v ${dev_directory}etc/php.ini /etc/php/php.ini

                # copy over custom .desktop files
                #mkdir -vp /mnt/usr/share/applications
                #cp -v /usr/share/applications/*.desktop /mnt/usr/share/applications/

                ## https://github.com/dmatarazzo/Sublime-Text-2-Icon
                echo "Updating Sublime Text 3 icons"
                cp -v /usr/share/icons/HighContrast/16x16/apps/sublime-text.png /mnt/usr/share/icons/HighContrast/16x16/apps/sublime-text.png
                cp -v /usr/share/icons/HighContrast/256x256/apps/sublime-text.png /mnt/usr/share/icons/HighContrast/256x256/apps/sublime-text.png
                cp -v /usr/share/icons/HighContrast/32x32/apps/sublime-text.png /mnt/usr/share/icons/HighContrast/32x32/apps/sublime-text.png
                cp -v /usr/share/icons/HighContrast/48x48/apps/sublime-text.png /mnt/usr/share/icons/HighContrast/48x48/apps/sublime-text.png
                cp -v /usr/share/icons/gnome/16x16/apps/sublime-text.png /mnt/usr/share/icons/gnome/16x16/apps/sublime-text.png
                cp -v /usr/share/icons/gnome/256x256/apps/sublime-text.png /mnt/usr/share/icons/gnome/256x256/apps/sublime-text.png
                cp -v /usr/share/icons/gnome/32x32/apps/sublime-text.png /mnt/usr/share/icons/gnome/32x32/apps/sublime-text.png
                cp -v /usr/share/icons/gnome/48x48/apps/sublime-text.png /mnt/usr/share/icons/gnome/48x48/apps/sublime-text.png
                cp -v /usr/share/icons/hicolor/128x128/apps/sublime-text.png /mnt/usr/share/icons/hicolor/128x128/apps/sublime-text.png
                cp -v /usr/share/icons/hicolor/16x16/apps/sublime-text.png /mnt/usr/share/icons/hicolor/16x16/apps/sublime-text.png
                cp -v /usr/share/icons/hicolor/256x256/apps/sublime-text.png /mnt/usr/share/icons/hicolor/256x256/apps/sublime-text.png
                cp -v /usr/share/icons/hicolor/32x32/apps/sublime-text.png /mnt/usr/share/icons/hicolor/32x32/apps/sublime-text.png
                cp -v /usr/share/icons/hicolor/48x48/apps/sublime-text.png /mnt/usr/share/icons/hicolor/48x48/apps/sublime-text.png
                cp -v /usr/share/icons/oxygen/128x128/apps/sublime-text.png /mnt/usr/share/icons/oxygen/128x128/apps/sublime-text.png
                cp -v /usr/share/icons/oxygen/16x16/apps/sublime-text.png /mnt/usr/share/icons/oxygen/16x16/apps/sublime-text.png
                cp -v /usr/share/icons/oxygen/256x256/apps/sublime-text.png /mnt/usr/share/icons/oxygen/256x256/apps/sublime-text.png
                cp -v /usr/share/icons/oxygen/32x32/apps/sublime-text.png /mnt/usr/share/icons/oxygen/32x32/apps/sublime-text.png
                cp -v /usr/share/icons/oxygen/48x48/apps/sublime-text.png /mnt/usr/share/icons/oxygen/48x48/apps/sublime-text.png

                ## mooOS icon
                cp -v ${MOO_TOOLS_PATH}images/mooOS-16.png /mnt/usr/share/icons/HighContrast/16x16/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-256.png /mnt/usr/share/icons/HighContrast/256x256/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-32.png /mnt/usr/share/icons/HighContrast/32x32/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-48.png /mnt/usr/share/icons/HighContrast/48x48/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-16.png /mnt/usr/share/icons/gnome/16x16/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-256.png /mnt/usr/share/icons/gnome/256x256/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-32.png /mnt/usr/share/icons/gnome/32x32/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-48.png /mnt/usr/share/icons/gnome/48x48/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-128.png /mnt/usr/share/icons/hicolor/128x128/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-16.png /mnt/usr/share/icons/hicolor/16x16/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-256.png /mnt/usr/share/icons/hicolor/256x256/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-32.png /mnt/usr/share/icons/hicolor/32x32/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-48.png /mnt/usr/share/icons/hicolor/48x48/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-128.png /mnt/usr/share/icons/oxygen/128x128/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-16.png /mnt/usr/share/icons/oxygen/16x16/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-256.png /mnt/usr/share/icons/oxygen/256x256/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-32.png /mnt/usr/share/icons/oxygen/32x32/apps/mooOS.png
                cp -v ${MOO_TOOLS_PATH}images/mooOS-48.png /mnt/usr/share/icons/oxygen/48x48/apps/mooOS.png
                
                # create ~/Github and all repos
                rm -rf /mnt/etc/skel/Github
                mkdir -vp /mnt/etc/skel/Github
                cp -v /etc/skel/Github/Github.* /mnt/etc/skel/Github/
            fi
        fi
        current_selection 6
    else
        current_selection 5
    fi
}

chroot_configuration() {
    $DIALOG --clear --backtitle "$upper_title" --title "Chroot (mandatory)" --msgbox "Chroot into mounted filesystem" 10 30 
    clean_return

    is_mnt_is_device_is_freespace /mnt 153456 ## 150 MiB
    if [ $? -eq 1 ]; then
        # fix missing icons in .desktop files
        if [ -f /mnt/etc/skel/.e/e/applications/menu/favorite.menu ]; then
            sed -i "/<Filename>moo_os_installer.desktop<\/Filename>/d" /mnt/etc/skel/.e/e/applications/menu/favorite.menu
        fi
        if [ -f /mnt/etc/skel/.e/e/applications/bar/default/.order ]; then
            sed -i "s/moo_installer/man_mooOS/g" /mnt/etc/skel/.e/e/applications/bar/default/.order
        fi
        if [ -f /mnt/usr/share/applications/mediadownloader.desktop ]; then
            sed -i "s/Icon=mediadownloader/Icon=mplayer/g" /mnt/usr/share/applications/mediadownloader.desktop
        fi
        #sed -i "s/Icon=nepomukpreferences-desktop/Icon=preferences-desktop/g" /usr/share/applications/kde4/nepomukbackup.desktop
        #sed -i "s/Icon=nepomukpreferences-desktop/Icon=preferences-desktop/g" /usr/share/applications/kde4/nepomukcleaner.desktop
        #sed -i "s/Icon=nepomukpreferences-desktop/Icon=preferences-desktop/g" /usr/share/applications/kde4/nepomukcontroller.desktop
        if [ -f /mnt/usr/share/applications/gparted.desktop ]; then
            sed -i "s/Exec=/Exec=kdesudo /g" /mnt/usr/share/applications/gparted.desktop
        fi
        if [ -f /mnt/usr/share/applications/kde4/krandrtray.desktop ]; then
            sed -i "s/Icon=preferences-desktop-display-randr/Icon=preferences-desktop-display/g" /mnt/usr/share/applications/kde4/krandrtray.desktop
        fi
        if [ -f /mnt/usr/share/applications/kde4/kinfocenter.desktop ]; then
            sed -i "s/Icon=hwinfo/Icon=preferences-system/g" /mnt/usr/share/applications/kde4/kinfocenter.desktop
        fi
        if [ -f /mnt/usr/share/applications/johnny.desktop ]; then
            sed -i "s/Icon=\/opt\/johnny\/johnny-128.png/Icon=seahorse/g" /mnt/usr/share/applications/johnny.desktop
        fi
        if [ -f /mnt/usr/share/applications/kde4/nepomukcleaner.desktop ]; then
            rm /mnt/usr/share/applications/kde4/nepomukcleaner.desktop
        fi

        if [ -f /mnt/usr/share/applications/kde4/akonaditray.desktop ]; then
            rm /mnt/usr/share/applications/kde4/akonaditray.desktop
        fi

        if [ -f /mnt/usr/share/applications/kde4/nepomukbackup.desktop ]; then
            rm /mnt/usr/share/applications/kde4/nepomukbackup.desktop
        fi

        if [ -f /mnt/usr/share/applications/feh.desktop ]; then
            rm /mnt/usr/share/applications/feh.desktop
        fi

        if [ -f /mnt/usr/share/applications/kde4/klipper.desktop ]; then
            rm /mnt/usr/share/applications/kde4/klipper.desktop
        fi

        if [ -f /mnt/usr/share/applications/kde4/nepomukcontroller.desktop ]; then
            rm /mnt/usr/share/applications/kde4/nepomukcontroller.desktop
        fi

        if [ -f /mnt/usr/share/applications/enlightenment_filemanager.desktop ]; then
            rm /mnt/usr/share/applications/enlightenment_filemanager.desktop
        fi

        if [ -f /mnt/usr/share/applications/avahi-discover.desktop ]; then
            rm /mnt/usr/share/applications/avahi-discover.desktop
        fi

        if [ -f /mnt/usr/share/applications/bssh.desktop ]; then
            rm /mnt/usr/share/applications/bssh.desktop
        fi

        if [ -f /mnt/usr/share/applications/bvnc.desktop ]; then
            rm /mnt/usr/share/applications/bvnc.desktop
        fi

        ## pass along boot partition argument
        pout=$(cat $TMP/pout)
        if [ -f /mnt/usr/bin/moo_chroot ]; then
            export TERM=xterm-color && arch-chroot /mnt sh -c "moo_chroot $pout"
        else
            echo "Hmmm, moo_chroot is missing from /mnt/usr/bin/. What's up with that? Go yell at pdq!!!"
            exit 0
        fi

        if [ -f /mnt/boot/grub/grub.cfg ]; then
            sed -i "s/set timeout=5/insmod jpeg\nbackground_image -m stretch \/etc\/grub.d\/splash.jpg\nset timeout=7/g" /mnt/boot/grub/grub.cfg
        fi
    fi
    current_selection 8
}

generate_fstab() {
    $DIALOG --clear --backtitle "$upper_title" --title "fstab configuration" --msgbox "Generate fstab" 10 30
    clean_return
   
    genfstab -U -p /mnt >> /mnt/etc/fstab
    $DIALOG --clear --backtitle "$upper_title" --title "fstab configuration" --defaultno --yesno "Do you wish to view/edit this file?" 10 30
    if [ $? = 0 ] ; then
        nano /mnt/etc/fstab
    fi
    
    $DIALOG --clear --backtitle "$upper_title" --title "fstab configuration" --msgbox "Hit enter to return to menu" 10 30
    current_selection 7
}

finishup() {
    $DIALOG --clear --backtitle "$upper_title" --title "Finishing up" --msgbox "Finish install - unmount /mnt/* and reboot" 10 30
    clean_return
    
    $DIALOG --clear --backtitle "$upper_title" --title "Finishing up" --msgbox "mooOS has been installed!\n\Reboot, to complete install of mooOS." 30 60

    $DIALOG --clear --backtitle "$upper_title" --title "Unmount" --yesno "Do you wish to unmount /mnt/* ?" 10 30
    if [ $? = 0 ] ; then
        umount /mnt/* 2>/dev/null
        umount /mnt 2>/dev/null
    fi
    $DIALOG --clear --backtitle "$upper_title" --title "Reboot" --yesno "Do you wish to reboot the system to complete this installation? (Remember to remove the mooOS Live DVD/USB)" 10 30
    if [ $? = 0 ] ; then
        reboot
    fi
}

$DIALOG --clear --backtitle "$upper_title" --title "Logs" --defaultno --yesno "Do you wish to view the system log while installation proceeds? (This maybe helpful)" 10 30
if [ $? = 0 ] ; then
    su $moo -c "urxvtc -name 'Logs' -title 'System Log' -e sudo journalctl -f"
fi

# utility execution
while true
do
    installer_menu
done

exit 0
